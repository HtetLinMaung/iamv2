generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Menu {
  id        String   @id @default(uuid())
  status    Int      @default(1)
  createdBy String   @default("")
  updatedBy String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  appid     String
  name      String
  level     Int      @default(1)
  parentid  String?
  creater   String   @default("")
  updater   String   @default("")
  parent    Menu?    @relation("SelfMenu", fields: [parentid], references: [id])
  menus     Menu[]   @relation("SelfMenu")
}

model Role {
  id            String         @id @default(uuid())
  status        Int            @default(1)
  createdBy     String         @default("")
  updatedBy     String         @default("")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  appid         String
  name          String
  description   String
  creater       String         @default("")
  updater       String         @default("")
  roleResources RoleResource[]
  userRoles     UserRole[]
}

model RoleResource {
  id           String        @id @default(uuid())
  status       Int           @default(1)
  createdBy    String        @default("")
  updatedBy    String        @default("")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  roleid       String
  resourceid   String
  permission   String        @default("crud")
  creater      String        @default("")
  updater      String        @default("")
  resource     Resource      @relation(fields: [resourceid], references: [id])
  role         Role          @relation(fields: [roleid], references: [id])
  accessRights AccessRight[]
}

model AccessRight {
  id             String       @id @default(uuid())
  status         Int          @default(1)
  createdBy      String       @default("")
  creater        String       @default("")
  updatedBy      String       @default("")
  updater        String       @default("")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  roleresourceid String
  userid         String
  roleResource   RoleResource @relation(fields: [roleresourceid], references: [id])
  user           User         @relation(fields: [userid], references: [id])
}

model Resource {
  id            String         @id @default(uuid())
  status        Int            @default(1)
  createdBy     String         @default("")
  updatedBy     String         @default("")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  appid         String
  name          String
  type          String
  ref           String
  creater       String         @default("")
  updater       String         @default("")
  roleResources RoleResource[]
}

model UserRole {
  id        String   @id @default(uuid())
  status    Int      @default(1)
  createdBy String   @default("")
  updatedBy String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userid    String
  roleid    String
  creater   String   @default("")
  updater   String   @default("")
  role      Role     @relation(fields: [roleid], references: [id])
  user      User     @relation(fields: [userid], references: [id])
}

model User {
  id             String        @id @default(uuid())
  status         Int           @default(1)
  createdBy      String        @default("")
  updatedBy      String        @default("")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  appid          String
  organizationid String?
  firstname      String
  lastname       String
  fullname       String
  username       String
  password       String
  profile        String?
  email          String?
  mobile         String?
  address        String?
  dob            String?
  level          Int           @default(1)
  accstatus      String        @default("active")
  twofactor      Boolean       @default(false)
  creater        String        @default("")
  updater        String        @default("")
  organization   Organization? @relation(fields: [organizationid], references: [id])
  accessRights   AccessRight[]
  userRoles      UserRole[]
}

model Organization {
  id        String   @id @default(uuid())
  status    Int      @default(1)
  createdBy String   @default("")
  updatedBy String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  appid     String
  name      String
  website   String?
  address   String?
  creater   String   @default("")
  updater   String   @default("")
  users     User[]
}

model customers {
  id         Int      @id @default(autoincrement())
  customerid String   @db.VarChar(255)
  mobileno   String   @db.VarChar(255)
  createdAt  DateTime @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)
}
